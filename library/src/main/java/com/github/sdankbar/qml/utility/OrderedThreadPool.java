/**
 * The MIT License
 * Copyright Â© 2020 Stephen Dankbar
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.github.sdankbar.qml.utility;

import java.util.Objects;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Semaphore;
import java.util.function.Consumer;
import java.util.function.Supplier;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * ThreadPool that allows work to be done in parallel but has hard ordering
 * guarantees. Work that is submitted first will be completed first.
 *
 * @param <T> Type of data generated by parallel processing portion of a job.
 */
public class OrderedThreadPool<T> {

	private static final Logger logger = LoggerFactory.getLogger(OrderedThreadPool.class);

	private static final class Job<T> {
		private volatile boolean isError = false;
		private volatile T result;
		private final Semaphore lock = new Semaphore(0);
		private final Consumer<T> consumer;

		public Job(final Consumer<T> consumer) {
			this.consumer = consumer;
		}
	}

	private final ExecutorService parallelExecutor;
	private final ExecutorService blockingExecutor = Executors.newSingleThreadExecutor();
	private final ExecutorService sequentialExecutor;

	private final BlockingQueue<Job<T>> jobQueue = new LinkedBlockingQueue<>();

	/**
	 * @param parallelExecutor   Executor used to process the parallel portion of
	 *                           the job.
	 * @param sequentialExecutor Executor used to process the sequential and ordered
	 *                           portion of the job.
	 */
	public OrderedThreadPool(final ExecutorService parallelExecutor, final ExecutorService sequentialExecutor) {
		this.parallelExecutor = Objects.requireNonNull(parallelExecutor, "parallelExecutor is null");
		this.sequentialExecutor = Objects.requireNonNull(sequentialExecutor, "sequentialExecutor is null");

		blockingExecutor.execute(() -> {
			while (!blockingExecutor.isShutdown()) {
				try {
					// Block until the next job on the queue is complete
					final Job<T> j = jobQueue.take();
					// Semaphore starts at 0 so will block until it is released
					// which happens when it finishes processing on the parallel
					// Executor.
					j.lock.acquire();

					processCompleteJob(j);
				} catch (final InterruptedException e) {
					// Ignore
				}
			}
		});
	}

	private void processCompleteJob(final Job<T> j) {
		// Process the complete job on the sequential thread
		if (!j.isError) {
			sequentialExecutor.execute(() -> {
				try {
					j.consumer.accept(j.result);
				} catch (final Exception e) {
					logger.warn("Exception processing sequential job", e);
				}
			});
		}
	}

	/**
	 * Submits work to this thread pool that has a portion that can be done in
	 * parallel and another portion that must be done in the order the work was
	 * submitted.
	 *
	 * @param parallelProcessing   Portion of the job that can be done in parallel.
	 *                             No ordering guarantees.
	 * @param sequentialProcessing Portion of the job that must be done in order.
	 *                             Work is guaranteed to be passed to the sequential
	 *                             Executor in the same order that the work was
	 *                             added with this method.
	 */
	public void submit(final Supplier<T> parallelProcessing, final Consumer<T> sequentialProcessing) {
		final Job<T> j = new Job<>(sequentialProcessing);
		jobQueue.add(j);

		parallelExecutor.execute(() -> {
			try {
				j.result = parallelProcessing.get();
			} catch (final Exception e) {
				logger.warn("Exception processing parallel job", e);
				j.isError = true;
			} finally {
				j.lock.release();
			}
		});
	}

}
